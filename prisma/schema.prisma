// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
}

model Booking {
  id                        Int     @id @default(autoincrement())
  house_id                 Int
  language                 Int
  type                     String
  arrival                  DateTime
  departure                DateTime
  company_name             String
  vat_identification_number String
  first_name               String
  last_name                String
  email                    String
  phone                    String
  mobile                   String
  city                     String
  address                  String
  postal_code              String
  adult                    String
  children                 String
  lindCount                String
  country                  String
  currency_code            Int
  bedlinen_amount          Int
  cleaning_included        Boolean
  comment                  String
  active_status            Boolean
  is_discounted            Boolean
  discount_code            String
  created_at               DateTime @default(now())
}

model Coupon {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  discount    Float
  isActive    Boolean  @default(true)
  from        DateTime
  to          DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Blog {
  id              Int              @id @default(autoincrement())
  title           String
  feature_image    String           // Base64 or URL for the main image (default language)
  publishDate     DateTime
  content         String
  short_description String

  translations    BlogTranslation[]  // Store translations for other languages

  @@map("blog") // Explicitly specify the table name if it differs
}

model BlogTranslation {
  id              Int        @id @default(autoincrement())
  lang_code        String     // e.g., 'en', 'es', etc.
  title           String
  content         String
  short_description String
  feature_image    String     // Base64 or URL for the feature image in this language

  blog_id          Int
  blog            Blog       @relation(fields: [blog_id], references: [id])

  @@unique([lang_code, blog_id])  // Ensure only one translation per language
  @@map("blog_translation") // Explicitly specify the table name if it differs
}


model Translation {
  id        Int      @id @default(autoincrement())
  key       String
  language  String
  value     String?   // For text content
  mediaUrl  String?   // For image/video URLs or Base64 strings
  type      String    // "text" | "image" | "video"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([key, language])
}